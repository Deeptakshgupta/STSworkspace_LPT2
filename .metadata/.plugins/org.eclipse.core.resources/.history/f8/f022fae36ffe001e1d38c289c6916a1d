package com.wcs.user.security;

import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Base64;

import javax.crypto.Cipher;

public class RSACipher {

	private PublicKey publicKey;
	private PrivateKey privateKey;
	
	public RSACipher() {
		try {
			KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
			generator.initialize(1024);
			KeyPair pair = generator.generateKeyPair();
			
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
		}
	}
	
	public String encrypt(String message) throws Exception{
		byte[] messageToBytes = message.getBytes();
		Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
		cipher.init(Cipher.ENCRYPT_MODE, publicKey);
		byte[] encryptedBytes = cipher.doFinal(messageToBytes);
		return encode(encryptedBytes);
				
	}
	
	public String decrypt(String encryptedMessage) throws Exception{
		byte[] encryptedBytes = decode(encryptedMessage);
		Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
		cipher.init(Cipher.DECRYPT_MODE, privateKey);
		byte[] decryptedBytes = cipher.doFinal(encryptedBytes);
		return new String (decryptedBytes, "UTF8");
	}
				
	
	
	private String encode (byte[] data) {
		return Base64.getEncoder().encodeToString(data);
	}
	
	private byte[] decode (String data) {
		return Base64.getDecoder().decode(data);
	}
	
	
}
