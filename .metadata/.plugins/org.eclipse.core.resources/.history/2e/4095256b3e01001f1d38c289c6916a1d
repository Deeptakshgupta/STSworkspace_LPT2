//package com.user.service;
//
//import java.util.Collection;
//import java.util.Optional;
//
//import org.springframework.security.core.GrantedAuthority;
//import org.springframework.security.core.authority.SimpleGrantedAuthority;
//import org.springframework.security.core.userdetails.UserDetails;
//import org.springframework.security.core.userdetails.User;
//import org.springframework.security.core.userdetails.UserDetailsService;
//import org.springframework.security.core.userdetails.UsernameNotFoundException;
//import org.springframework.stereotype.Service;
//
//import com.user.model.User_deep;
//import com.user.repository.UserRepository;
//
//import org.springframework.transaction.annotation.Transactional;
//import lombok.AllArgsConstructor;
//
////static import
//import static java.util.Collections.singletonList;
//
//@Service
//@AllArgsConstructor
//public class UserDetailsServiceImpl implements UserDetailsService {
//    private final UserRepository userRepository;
//
//    @Override
//    @Transactional(readOnly = true)
//    public UserDetails loadUserByUsername(String username) {
//        Optional<User_deep> userOptional = userRepository.findByUsername(username);
////null check
//        User_deep user = userOptional
//                .orElseThrow(() -> new UsernameNotFoundException("No user " +
//                        "Found with username : " + username));
//
//        return new User(user.getUsername(), user.getPassword(),
//                user.isEnabled(), true, true,
//                true, getAuthorities("ADMIN"));
//    }
//
//    private Collection<? extends GrantedAuthority> getAuthorities(String role) {
//        return singletonList(new SimpleGrantedAuthority(role));
//    }
//}